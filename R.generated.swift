//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 17 files.
  struct file {
    /// Resource file `back.pdf`.
    static let backPdf = Rswift.FileResource(bundle: R.hostingBundle, name: "back", pathExtension: "pdf")
    /// Resource file `background1.pdf`.
    static let background1Pdf = Rswift.FileResource(bundle: R.hostingBundle, name: "background1", pathExtension: "pdf")
    /// Resource file `background2.pdf`.
    static let background2Pdf = Rswift.FileResource(bundle: R.hostingBundle, name: "background2", pathExtension: "pdf")
    /// Resource file `background3.pdf`.
    static let background3Pdf = Rswift.FileResource(bundle: R.hostingBundle, name: "background3", pathExtension: "pdf")
    /// Resource file `burger.pdf`.
    static let burgerPdf = Rswift.FileResource(bundle: R.hostingBundle, name: "burger", pathExtension: "pdf")
    /// Resource file `checkbox.pdf`.
    static let checkboxPdf = Rswift.FileResource(bundle: R.hostingBundle, name: "checkbox", pathExtension: "pdf")
    /// Resource file `cross.pdf`.
    static let crossPdf = Rswift.FileResource(bundle: R.hostingBundle, name: "cross", pathExtension: "pdf")
    /// Resource file `dots.pdf`.
    static let dotsPdf = Rswift.FileResource(bundle: R.hostingBundle, name: "dots", pathExtension: "pdf")
    /// Resource file `navigationDots.pdf`.
    static let navigationDotsPdf = Rswift.FileResource(bundle: R.hostingBundle, name: "navigationDots", pathExtension: "pdf")
    /// Resource file `personal.pdf`.
    static let personalPdf = Rswift.FileResource(bundle: R.hostingBundle, name: "personal", pathExtension: "pdf")
    /// Resource file `personal_outline.pdf`.
    static let personal_outlinePdf = Rswift.FileResource(bundle: R.hostingBundle, name: "personal_outline", pathExtension: "pdf")
    /// Resource file `search.pdf`.
    static let searchPdf = Rswift.FileResource(bundle: R.hostingBundle, name: "search", pathExtension: "pdf")
    /// Resource file `timer.pdf`.
    static let timerPdf = Rswift.FileResource(bundle: R.hostingBundle, name: "timer", pathExtension: "pdf")
    /// Resource file `today.pdf`.
    static let todayPdf = Rswift.FileResource(bundle: R.hostingBundle, name: "today", pathExtension: "pdf")
    /// Resource file `today_outline.pdf`.
    static let today_outlinePdf = Rswift.FileResource(bundle: R.hostingBundle, name: "today_outline", pathExtension: "pdf")
    /// Resource file `work.pdf`.
    static let workPdf = Rswift.FileResource(bundle: R.hostingBundle, name: "work", pathExtension: "pdf")
    /// Resource file `work_outline.pdf`.
    static let work_outlinePdf = Rswift.FileResource(bundle: R.hostingBundle, name: "work_outline", pathExtension: "pdf")
    
    /// `bundle.url(forResource: "back", withExtension: "pdf")`
    static func backPdf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.backPdf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "background1", withExtension: "pdf")`
    static func background1Pdf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.background1Pdf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "background2", withExtension: "pdf")`
    static func background2Pdf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.background2Pdf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "background3", withExtension: "pdf")`
    static func background3Pdf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.background3Pdf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "burger", withExtension: "pdf")`
    static func burgerPdf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.burgerPdf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "checkbox", withExtension: "pdf")`
    static func checkboxPdf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.checkboxPdf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "cross", withExtension: "pdf")`
    static func crossPdf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.crossPdf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "dots", withExtension: "pdf")`
    static func dotsPdf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dotsPdf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "navigationDots", withExtension: "pdf")`
    static func navigationDotsPdf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.navigationDotsPdf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "personal", withExtension: "pdf")`
    static func personalPdf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.personalPdf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "personal_outline", withExtension: "pdf")`
    static func personal_outlinePdf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.personal_outlinePdf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "search", withExtension: "pdf")`
    static func searchPdf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.searchPdf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "timer", withExtension: "pdf")`
    static func timerPdf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.timerPdf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "today", withExtension: "pdf")`
    static func todayPdf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.todayPdf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "today_outline", withExtension: "pdf")`
    static func today_outlinePdf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.today_outlinePdf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "work", withExtension: "pdf")`
    static func workPdf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.workPdf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "work_outline", withExtension: "pdf")`
    static func work_outlinePdf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.work_outlinePdf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `LaunchImage`.
    static let launchImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchImage")
    /// Image `avatar`.
    static let avatar = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar")
    
    /// `UIImage(named: "LaunchImage", bundle: ..., traitCollection: ...)`
    static func launchImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "avatar", bundle: ..., traitCollection: ...)`
    static func avatar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 0 storyboards.
  struct storyboard {
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 7 localization keys.
    struct localizable {
      /// Value: %d tasks
      static let projectTasksDtasks = Rswift.StringResource(key: "project-tasks.%dtasks", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Hello, %@
      static let homeWelcomeMessage = Rswift.StringResource(key: "home.welcome-message%@", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Looks like feel good. You have %d tasks to do today.
      static let homeStatusMessageD = Rswift.StringResource(key: "home.status-message%d", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: New Task
      static let newTaskTitle = Rswift.StringResource(key: "new-task.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: TODAY: %@
      static let homeToday = Rswift.StringResource(key: "home.today%@", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: TODO
      static let homeTitle = Rswift.StringResource(key: "home.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: What tasks are you planning to perform?
      static let newTaskHint = Rswift.StringResource(key: "new-task.hint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: %d tasks
      static func projectTasksDtasks(_ value1: Int) -> String {
        return String(format: NSLocalizedString("project-tasks.%dtasks", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: Hello, %@
      static func homeWelcomeMessage(_ value1: String) -> String {
        return String(format: NSLocalizedString("home.welcome-message%@", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: Looks like feel good. You have %d tasks to do today.
      static func homeStatusMessageD(_ value1: Int) -> String {
        return String(format: NSLocalizedString("home.status-message%d", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: New Task
      static func newTaskTitle(_: Void = ()) -> String {
        return NSLocalizedString("new-task.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: TODAY: %@
      static func homeToday(_ value1: String) -> String {
        return String(format: NSLocalizedString("home.today%@", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: TODO
      static func homeTitle(_: Void = ()) -> String {
        return NSLocalizedString("home.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: What tasks are you planning to perform?
      static func newTaskHint(_: Void = ()) -> String {
        return NSLocalizedString("new-task.hint", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R {
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard {
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
